#Each new term in the Fibonacci sequence is generated by adding the
#previous two terms. By starting with 1 and 2, the first 10 terms will be:

#1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

#By considering the terms in the Fibonacci sequence whose values do not
#exceed four million, find the sum of the even-valued terms.



def evenFibs(num):
    fibsList = [1,2]
    n=1
    while fibsList[n]+fibsList[n-1]<num:
        n+=1
        i=(fibsList[n-1]+fibsList[n-2])
        fibsList.append(i)
    evenFibsList=[]
    for i in fibsList:
        if i%2==0:
            evenFibsList.append(i)
    return sum(evenFibsList)

#the num argument is the upper limit for the values of the numbers in
#the Fibonacci sequence to be included. the while loop then creates a list
#of all Fibonacci numbers whose value does not exceed the upper limit.
#the even Fibonacci numbers from this list are then inserted into
#a new list, whose sum is returned. to solve this problem, call the
#evenFibs function as evenFibs(4000000).
    
