#Triangle, pentagonal, and hexagonal numbers are generated by
#the following formulae:

#Triangle	 	T(n)=n(n+1)/2	 	1, 3, 6, 10, 15, ...
#Pentagonal	 	P(n)=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
#Hexagonal	 	H(n)=n(2n−1)	 	1, 6, 15, 28, 45, ...

#It can be verified that T(285) = P(165) = H(143) = 40755.

#Find the next triangle number that is also pentagonal and hexagonal.




def checkNum(N):
    triNumList=[]
    pentNumList=[]
    hexNumList=[]
    i=1
    for i in range(1,N+1):
        triNumList.append((i*(i+1))//2)
        pentNumList.append((i*((3*i)-1))//2)
        hexNumList.append(i*((2*i)-1))
        i+=1
    matchesList=[]
    for i in triNumList:
        if i in pentNumList and i in hexNumList:
            matchesList.append(i)
    return matchesList
    
#this function starts by creating lists of the first N triangular, pentagonal,
#and hexagonal numbers. it then looks at each of the triangular numbers and
#checks if that value is also in the list of pentagonal and hexagonal numbers.
#for each match that occurs, the value is added to the matchesList, which
#is then returned. by calling this function with N set to 100,000, the next
#number that is triangular, pentagonal, and hexagonal past 40,755 is returned,
#although it takes a decent amount of time. this is my best effort, but i will
#definitely be revisiting this problem to find a more effecient solution.
